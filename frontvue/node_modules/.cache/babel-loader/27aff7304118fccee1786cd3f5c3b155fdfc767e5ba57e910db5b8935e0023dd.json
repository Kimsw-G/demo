{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6e39cf17\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"sign-box\"\n};\nconst _hoisted_2 = [\"disabled\"];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"6자리 이상의 아이디\",\n    class: \"all-box\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.state.id = $event),\n    ref: \"id\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.state.id]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    placeholder: \"영어와 숫자를 포함한 10자리 이상 비밀번호\",\n    class: \"all-box\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.state.password = $event),\n    ref: \"password\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.state.password]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    placeholder: \"비밀번호 확인\",\n    class: \"all-box\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.state.password_chk = $event),\n    ref: \"password_chk\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.state.password_chk]]), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"이름\",\n    class: \"all-box\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.state.name = $event),\n    ref: \"name\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.state.name]]), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: \"이름\",\n    class: \"all-box call-box\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.state.phone = $event),\n    ref: \"phone\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.state.phone]]), _createElementVNode(\"button\", {\n    class: \"all-box phone-button\",\n    ref: \"phoenButton\",\n    onKeyup: _cache[5] || (_cache[5] = (...args) => _ctx.isPhoneCheck && _ctx.isPhoneCheck(...args)),\n    disabled: _ctx.state.isPhone\n  }, \"인증하기\", 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2)]), _createElementVNode(\"button\", {\n    class: \"login-button all-box\",\n    onClick: _cache[6] || (_cache[6] = (...args) => _ctx.checkAll && _ctx.checkAll(...args))\n  }, \"회원가입(임시)\")])]);\n}","map":{"version":3,"mappings":";;;EAEaA,KAAK,EAAC;AAAU;;;uBADzBC,oBAYM,cAXFC,oBAUM,OAVNC,UAUM,mBATFD,oBAA0F;IAAnFE,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,aAAa;IAACL,KAAK,EAAC,SAAU;+DAAUM,UAAK,CAACC,EAAE;IAAEC,GAAG,EAAC;iDAAdF,UAAK,CAACC,EAAE,qBAC/EL,oBAAuH;IAAhHE,IAAI,EAAC,UAAU;IAACC,WAAW,EAAC,0BAA0B;IAACL,KAAK,EAAC,SAAU;+DAAUM,UAAK,CAACG,QAAQ;IAAED,GAAG,EAAC;iDAApBF,UAAK,CAACG,QAAQ,qBACtGP,oBAA6G;IAAtGE,IAAI,EAAC,UAAU;IAACC,WAAW,EAAC,SAAS;IAACL,KAAK,EAAC,SAAS;+DAAUM,UAAK,CAACI,YAAY;IAAEF,GAAG,EAAC;iDAAxBF,UAAK,CAACI,YAAY,qBACxFR,oBAAoF;IAA7EE,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,IAAI;IAACL,KAAK,EAAC,SAAS;+DAAUM,UAAK,CAACK,IAAI;IAAEH,GAAG,EAAC;iDAAhBF,UAAK,CAACK,IAAI,KACvET,oBAGM,8BAFFA,oBAAgG;IAAzFE,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,IAAI;IAACL,KAAK,EAAC,kBAAkB;+DAAUM,UAAK,CAACM,KAAK;IAAEJ,GAAG,EAAC;iDAAjBF,UAAK,CAACM,KAAK,KACjFV,oBAAoH;IAA5GF,KAAK,EAAC,sBAAsB;IAACQ,GAAG,EAAC,aAAa;IAAEK,OAAK,yCAAEP,+CAAY;IAAGQ,QAAQ,EAAER,UAAK,CAACS;KAAS,MAAI,iDAE/Gb,oBAAyE;IAAjEF,KAAK,EAAC,sBAAsB;IAAEgB,OAAK,yCAAEV,uCAAQ;KAAG,UAAQ","names":["class","_createElementBlock","_createElementVNode","_hoisted_1","type","placeholder","_ctx","id","ref","password","password_chk","name","phone","onKeyup","disabled","isPhone","onClick"],"sourceRoot":"","sources":["C:\\Users\\ds\\Documents\\ksw\\swtodo\\frontvue\\src\\views\\SignupView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"sign-box\">\r\n            <input type=\"text\" placeholder=\"6자리 이상의 아이디\" class=\"all-box \" v-model=\"state.id\" ref=\"id\">\r\n            <input type=\"password\" placeholder=\"영어와 숫자를 포함한 10자리 이상 비밀번호\" class=\"all-box \" v-model=\"state.password\" ref=\"password\">\r\n            <input type=\"password\" placeholder=\"비밀번호 확인\" class=\"all-box\" v-model=\"state.password_chk\" ref=\"password_chk\">\r\n            <input type=\"text\" placeholder=\"이름\" class=\"all-box\" v-model=\"state.name\" ref=\"name\">\r\n            <div>\r\n                <input type=\"text\" placeholder=\"이름\" class=\"all-box call-box\" v-model=\"state.phone\" ref=\"phone\"/>\r\n                <button class=\"all-box phone-button\" ref=\"phoenButton\" @keyup=\"isPhoneCheck\" :disabled=\"state.isPhone\">인증하기</button>\r\n            </div>\r\n            <button class=\"login-button all-box\" @click=\"checkAll\" >회원가입(임시)</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { reactive,ref } from 'vue'\r\nexport default {\r\n    components: {},\r\n    data() {\r\n        return {\r\n            sampleData: ''\r\n        }\r\n    },\r\n    created() { },\r\n    setup(){\r\n        \r\n        const state = reactive({\r\n            id: '',\r\n            password: '',\r\n            password_chk: '',\r\n            name: '',\r\n            phone: '',\r\n            isPhone: false\r\n        })\r\n        const id = ref(null)\r\n        const password = ref(null)\r\n        // const password_chk = ref(null)\r\n        const name = ref(null)\r\n        const phone = ref(null)\r\n        const phoenButton = ref(null)\r\n        const checkID = ()=>{\r\n            const ID_LENGTH_MIN = 6\r\n            if(state.id.length<ID_LENGTH_MIN){\r\n                alert('아이디는 6글자 이상입니다')\r\n                id.value.focus()\r\n                return true;\r\n            }\r\n            return false\r\n        }\r\n        const goToPassword = ()=>{\r\n            state.password=''\r\n            state.password_chk=''\r\n            password.value.focus()\r\n        }\r\n        const checkPassword = ()=>{\r\n            if(state.password!=state.password_chk){\r\n                alert('패스워드가 일치하지 않습니다')\r\n                goToPassword()\r\n                return true;\r\n            }\r\n            return false\r\n        }\r\n        const checkPasswordLaw = ()=>{\r\n            let regPass = /^(?=.*[a-zA-Z])(?=.*[0-9]).{10,20}$/\r\n            if (!regPass.test(state.password)) {\r\n                alert(\"영문, 숫자 조합으로 10-20자리 입력해주세요.\")\r\n                goToPassword()\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n        const checkName = ()=>{\r\n            console.log(name.value);\r\n            if(state.name.length==0){\r\n                alert(\"이름을 입력해 주세요\")\r\n                name.value.focus()\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n        const signUp = ()=>{\r\n            // 회원가입 axios\r\n            console.log('회원가입 완료');\r\n        }\r\n\r\n        const checkAll = ()=>{\r\n            if(checkID()) return\r\n            if(checkPassword()) return\r\n            if(checkPasswordLaw()) return\r\n            if(checkName()) return\r\n            signUp()\r\n        }\r\n\r\n        const isPhoneCheck = ()=>{\r\n            if(state.phone==11) {\r\n\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        return{\r\n            checkAll, state, id, password, name, phone, phoenButton isPhoneCheck\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n.sign-box{\r\n    display: grid;\r\n    width: 25vw;\r\n    min-width: 300px;\r\n    gap: 0.4em;\r\n    margin: 0 auto;\r\n    margin-top:5em;\r\n}\r\n.all-box{\r\n    height: 4em;\r\n    border-radius: 10px;\r\n}\r\ninput{\r\n    padding: 10px;\r\n}\r\nbutton:hover{\r\n    background-color: #d9d9d9;\r\n}\r\n.call-box{\r\n    margin-right: 10px;\r\n}\r\n.phone-button{\r\n    height: 3.9em;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}